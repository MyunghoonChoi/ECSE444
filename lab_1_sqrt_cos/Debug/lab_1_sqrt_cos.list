
lab_1_sqrt_cos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08001854  08001854  00011854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002098  08002098  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002098  08002098  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002098  08002098  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002098  08002098  00012098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800209c  0800209c  0001209c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080020a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000005c  080020fc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080020fc  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_line   00006da1  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000090  00000000  00000000  00026ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00008864  00000000  00000000  00026f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000016f5  00000000  00000000  0002f7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000608  00000000  00000000  00030ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1cac  00000000  00000000  000314d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000003ef  00000000  00000000  00113184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00024e27  00000000  00000000  00113573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001574  00000000  00000000  0013839c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  00139910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00139b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800183c 	.word	0x0800183c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	0800183c 	.word	0x0800183c

080001c8 <asmFpuSqrt>:
 * R0 = pointer to output value
 *
 */

 asmFpuSqrt:
 	VSQRT.f32	S0, S0
 80001c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 	VSTR.f32    S0, [R0]
 80001cc:	ed80 0a00 	vstr	s0, [r0]
	BX			LR
 80001d0:	4770      	bx	lr

080001d2 <epsilon>:
 80001d2:	3924      	.short	0x3924
 80001d4:	33ec      	.short	0x33ec

080001d6 <asmx2cos>:
 * R0 = pointer to the output
 *
 */

asmx2cos:
 	PUSH		{R4-R5, LR}
 80001d6:	b530      	push	{r4, r5, lr}
 	VPUSH.f32	{S4-S11}
 80001d8:	ed2d 2a08 	vpush	{s4-s11}
 	VMOV.f32	S4, S0 // float32_t x0;
 80001dc:	eeb0 2a40 	vmov.f32	s4, s0
 	MOV			R3, #0
 80001e0:	f04f 0300 	mov.w	r3, #0
 	VMOV.f32	S5, R3 // float32_t fx0arg;
 80001e4:	ee02 3a90 	vmov	s5, r3
 	VMOV.f32	S6, R3 // float32_t fx0;
 80001e8:	ee03 3a10 	vmov	s6, r3
 	VMOV.f32	S7, R3 // float32_t fprimex0;
 80001ec:	ee03 3a90 	vmov	s7, r3
 	VMOV.f32	S8, R3 // float32_t x1;
 80001f0:	ee04 3a10 	vmov	s8, r3
 	VMOV.f32    S9, S0 // S8 - S4 = S9, to compare with epsilon
 80001f4:	eef0 4a40 	vmov.f32	s9, s0
 	VMOV.f32	S10, S1 // copy: float32_t phi
 80001f8:	eeb0 5a60 	vmov.f32	s10, s1
 	VMOV.f32	S11, S2 // copy: float32_t omega
 80001fc:	eef0 5a41 	vmov.f32	s11, s2
 	MOV			R4, R0 // copy: float32_t *pOut
 8000200:	4604      	mov	r4, r0
 	MOV			R5, #64 // const uint32_t max_iterations = 64;
 8000202:	f04f 0540 	mov.w	r5, #64	; 0x40
 	LDR			R6, epsilon
 8000206:	f85f 6038 	ldr.w	r6, [pc, #-56]	; 80001d0 <asmFpuSqrt+0x8>

0800020a <asmx2cos_loop>:

asmx2cos_loop:
	SUBS		R5, R5, #1
 800020a:	3d01      	subs	r5, #1
	BLT			asmx2cos_end_failure
 800020c:	db28      	blt.n	8000260 <asmx2cos_end_failure>
	VMUL.f32	S5, S4, S11 // fx0arg = x0*omega + phi;
 800020e:	ee62 2a25 	vmul.f32	s5, s4, s11
	VADD.f32	S5, S5, S10
 8000212:	ee72 2a85 	vadd.f32	s5, s5, s10
	VMOV.f32	S0, S5
 8000216:	eeb0 0a62 	vmov.f32	s0, s5
 	BL			arm_cos_f32 // output arm_cos_f32(fx0arg) to S0
 800021a:	f001 fa71 	bl	8001700 <arm_cos_f32>
	VNMLS.f32	S0, S4, S4  // fx0 = x0*x0 - arm_cos_f32(fx0arg);
 800021e:	ee12 0a02 	vnmls.f32	s0, s4, s4
	VMOV.f32	S6, S0
 8000222:	eeb0 3a40 	vmov.f32	s6, s0
	VMOV.f32	S0, S5
 8000226:	eeb0 0a62 	vmov.f32	s0, s5
	BL			arm_sin_f32 // output: arm_cos_f32(fx0arg) to S0
 800022a:	f001 fa23 	bl	8001674 <arm_sin_f32>
	VADD.f32	S1, S4, S4 // fprimex0 = 2*x0 + omega*arm_sin_f32(fx0arg);
 800022e:	ee72 0a02 	vadd.f32	s1, s4, s4
	VMLA.f32	S1, S0, S11
 8000232:	ee40 0a25 	vmla.f32	s1, s0, s11
	VDIV.f32	S8, S6, S1 // x1 = x0 - fx0/fprimex0;
 8000236:	ee83 4a20 	vdiv.f32	s8, s6, s1
	VSUB.f32	S8, S4, S8
 800023a:	ee32 4a44 	vsub.f32	s8, s4, s8
	VSUB.f32    S9, S8, S4
 800023e:	ee74 4a42 	vsub.f32	s9, s8, s4
	VABS.f32    S9, S9
 8000242:	eef0 4ae4 	vabs.f32	s9, s9
	VMOV.f32	S2, R6
 8000246:	ee01 6a10 	vmov	s2, r6
	VCMP.f32	S9, S2
 800024a:	eef4 4a41 	vcmp.f32	s9, s2
	VMRS		APSR_nzcv, FPSCR
 800024e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	BLT			asmx2cos_end_success
 8000252:	db02      	blt.n	800025a <asmx2cos_end_success>
	VMOV.f32	S4, S8
 8000254:	eeb0 2a44 	vmov.f32	s4, s8
	B			asmx2cos_loop
 8000258:	e7d7      	b.n	800020a <asmx2cos_loop>

0800025a <asmx2cos_end_success>:

asmx2cos_end_success:
	VSTR.f32	S8, [R4]
 800025a:	ed84 4a00 	vstr	s8, [r4]
	B			asmx2cos_end
 800025e:	e006      	b.n	800026e <asmx2cos_end>

08000260 <asmx2cos_end_failure>:

asmx2cos_end_failure:
	MOV			R3, #0
 8000260:	f04f 0300 	mov.w	r3, #0
	VMOV.f32	S8, R0
 8000264:	ee04 0a10 	vmov	s8, r0
	VSTR.f32	S8, [R4]
 8000268:	ed84 4a00 	vstr	s8, [r4]
	B			asmx2cos_end
 800026c:	e7ff      	b.n	800026e <asmx2cos_end>

0800026e <asmx2cos_end>:

asmx2cos_end:
	VPOP.f32	{S4-S11}
 800026e:	ecbd 2a08 	vpop	{s4-s11}
	POP			{R4-R5, PC}
 8000272:	bd30      	pop	{r4, r5, pc}

08000274 <cNewtonSqrt>:
 */

#include "main.h"
#include "arm_math.h"

void cNewtonSqrt(const float32_t in, float32_t *pOut) {
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	ed87 0a01 	vstr	s0, [r7, #4]
 800027e:	6038      	str	r0, [r7, #0]

	float32_t inx0;
	float32_t inx1;
	const uint32_t max_iterations = 100;
 8000280:	2364      	movs	r3, #100	; 0x64
 8000282:	617b      	str	r3, [r7, #20]
	const float32_t epsilon = 1.1e-7;
 8000284:	4b25      	ldr	r3, [pc, #148]	; (800031c <cNewtonSqrt+0xa8>)
 8000286:	613b      	str	r3, [r7, #16]

	if (in < 0) {
 8000288:	edd7 7a01 	vldr	s15, [r7, #4]
 800028c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000294:	d504      	bpl.n	80002a0 <cNewtonSqrt+0x2c>
		(*pOut) = 0;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	f04f 0200 	mov.w	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
		return;
 800029e:	e038      	b.n	8000312 <cNewtonSqrt+0x9e>
	}

	inx0 = in/2; // Initial guess.
 80002a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80002a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80002a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002ac:	edc7 7a07 	vstr	s15, [r7, #28]

	// Newton-Raphson method for the square root reduces to this expression.
	// This may be expressed non-recursively.
	for (uint32_t i = 0; i<max_iterations; i++) {
 80002b0:	2300      	movs	r3, #0
 80002b2:	61bb      	str	r3, [r7, #24]
 80002b4:	e025      	b.n	8000302 <cNewtonSqrt+0x8e>
		inx1 = (inx0 + (in / inx0))/2;
 80002b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80002ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80002be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80002c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80002c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80002ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80002ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002d2:	edc7 7a03 	vstr	s15, [r7, #12]
		if (inx0 - inx1 < epsilon) { // Save one instruction since the difference is always positive.
 80002d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80002da:	edd7 7a03 	vldr	s15, [r7, #12]
 80002de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80002e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80002e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80002ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002ee:	dd03      	ble.n	80002f8 <cNewtonSqrt+0x84>
			(*pOut) = inx1;
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	601a      	str	r2, [r3, #0]
			return;
 80002f6:	e00c      	b.n	8000312 <cNewtonSqrt+0x9e>
		}
		inx0 = inx1;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i<max_iterations; i++) {
 80002fc:	69bb      	ldr	r3, [r7, #24]
 80002fe:	3301      	adds	r3, #1
 8000300:	61bb      	str	r3, [r7, #24]
 8000302:	69ba      	ldr	r2, [r7, #24]
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	429a      	cmp	r2, r3
 8000308:	d3d5      	bcc.n	80002b6 <cNewtonSqrt+0x42>
	}

	(*pOut) = 0;
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	f04f 0200 	mov.w	r2, #0
 8000310:	601a      	str	r2, [r3, #0]

}
 8000312:	3724      	adds	r7, #36	; 0x24
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	33ec3924 	.word	0x33ec3924

08000320 <cNewtonx2cos>:
 */

#include "main.h"
#include "arm_math.h"

void cNewtonx2cos(float32_t guess, float32_t phi, float32_t omega, float32_t *pOut) {
 8000320:	b580      	push	{r7, lr}
 8000322:	ed2d 8b02 	vpush	{d8}
 8000326:	b08c      	sub	sp, #48	; 0x30
 8000328:	af00      	add	r7, sp, #0
 800032a:	ed87 0a03 	vstr	s0, [r7, #12]
 800032e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000332:	ed87 1a01 	vstr	s2, [r7, #4]
 8000336:	6038      	str	r0, [r7, #0]

	float32_t x0 = guess;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t fx0arg;
	float32_t fx0;
	float32_t fprimex0;
	float32_t x1;
	const uint32_t max_iterations = 64;
 800033c:	2340      	movs	r3, #64	; 0x40
 800033e:	627b      	str	r3, [r7, #36]	; 0x24
	const float32_t epsilon = 1.1e-7;
 8000340:	4b30      	ldr	r3, [pc, #192]	; (8000404 <cNewtonx2cos+0xe4>)
 8000342:	623b      	str	r3, [r7, #32]

	for (uint32_t i = 0; i<max_iterations; i++) {
 8000344:	2300      	movs	r3, #0
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
 8000348:	e04f      	b.n	80003ea <cNewtonx2cos+0xca>
		fx0arg = x0*omega + phi;
 800034a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800034e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000356:	ed97 7a02 	vldr	s14, [r7, #8]
 800035a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800035e:	edc7 7a07 	vstr	s15, [r7, #28]
		fx0 = x0*x0 - arm_cos_f32(fx0arg);
 8000362:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000366:	ee27 8aa7 	vmul.f32	s16, s15, s15
 800036a:	ed97 0a07 	vldr	s0, [r7, #28]
 800036e:	f001 f9c7 	bl	8001700 <arm_cos_f32>
 8000372:	eef0 7a40 	vmov.f32	s15, s0
 8000376:	ee78 7a67 	vsub.f32	s15, s16, s15
 800037a:	edc7 7a06 	vstr	s15, [r7, #24]
		fprimex0 = 2*x0 + omega*arm_sin_f32(fx0arg);
 800037e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000382:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8000386:	ed97 0a07 	vldr	s0, [r7, #28]
 800038a:	f001 f973 	bl	8001674 <arm_sin_f32>
 800038e:	eeb0 7a40 	vmov.f32	s14, s0
 8000392:	edd7 7a01 	vldr	s15, [r7, #4]
 8000396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800039a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800039e:	edc7 7a05 	vstr	s15, [r7, #20]
		x1 = x0 - fx0/fprimex0;
 80003a2:	edd7 6a06 	vldr	s13, [r7, #24]
 80003a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80003aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003ae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80003b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80003b6:	edc7 7a04 	vstr	s15, [r7, #16]
		if (fabs(x1 - x0) < epsilon) {
 80003ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80003be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80003c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80003c6:	eef0 7ae7 	vabs.f32	s15, s15
 80003ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80003ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d6:	dd03      	ble.n	80003e0 <cNewtonx2cos+0xc0>
			(*pOut) = x1;
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	693a      	ldr	r2, [r7, #16]
 80003dc:	601a      	str	r2, [r3, #0]
			return;
 80003de:	e00c      	b.n	80003fa <cNewtonx2cos+0xda>
		}
		x0 = x1;
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 0; i<max_iterations; i++) {
 80003e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003e6:	3301      	adds	r3, #1
 80003e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80003ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d3ab      	bcc.n	800034a <cNewtonx2cos+0x2a>
	}

	(*pOut) = 0;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
}
 80003fa:	3730      	adds	r7, #48	; 0x30
 80003fc:	46bd      	mov	sp, r7
 80003fe:	ecbd 8b02 	vpop	{d8}
 8000402:	bd80      	pop	{r7, pc}
 8000404:	33ec3924 	.word	0x33ec3924

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b090      	sub	sp, #64	; 0x40
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040e:	f000 f9aa 	bl	8000766 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000412:	f000 f8af 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000416:	f000 f8ff 	bl	8000618 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  const float32_t val_i1 = 12321;
 800041a:	4b53      	ldr	r3, [pc, #332]	; (8000568 <main+0x160>)
 800041c:	62bb      	str	r3, [r7, #40]	; 0x28
  float32_t val_f1 = 0;
 800041e:	f04f 0300 	mov.w	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
  float32_t val_f2 = 0;
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  float32_t val_f3 = 0;
 800042a:	f04f 0300 	mov.w	r3, #0
 800042e:	60bb      	str	r3, [r7, #8]

  float32_t val_i2_guess = 0.03;
 8000430:	4b4e      	ldr	r3, [pc, #312]	; (800056c <main+0x164>)
 8000432:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t val_i2_omega = 1;
 8000434:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000438:	623b      	str	r3, [r7, #32]
  float32_t val_i2_phi = 1;
 800043a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800043e:	61fb      	str	r3, [r7, #28]
  float32_t val_f4 = 0;
 8000440:	f04f 0300 	mov.w	r3, #0
 8000444:	607b      	str	r3, [r7, #4]
  float32_t val_f5 = 0;
 8000446:	f04f 0300 	mov.w	r3, #0
 800044a:	603b      	str	r3, [r7, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ITM_Port32(31) = 1;
 800044c:	4b48      	ldr	r3, [pc, #288]	; (8000570 <main+0x168>)
 800044e:	2201      	movs	r2, #1
 8000450:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i<1000; i++) {
 8000452:	2300      	movs	r3, #0
 8000454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000456:	e009      	b.n	800046c <main+0x64>
		asmFpuSqrt(val_i1, &val_f1);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4618      	mov	r0, r3
 800045e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8000462:	f7ff feb1 	bl	80001c8 <asmFpuSqrt>
	for (uint32_t i=0; i<1000; i++) {
 8000466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000468:	3301      	adds	r3, #1
 800046a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800046c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800046e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000472:	d3f1      	bcc.n	8000458 <main+0x50>
	}
	ITM_Port32(31) = 2;
 8000474:	4b3e      	ldr	r3, [pc, #248]	; (8000570 <main+0x168>)
 8000476:	2202      	movs	r2, #2
 8000478:	601a      	str	r2, [r3, #0]

	ITM_Port32(31) = 1;
 800047a:	4b3d      	ldr	r3, [pc, #244]	; (8000570 <main+0x168>)
 800047c:	2201      	movs	r2, #1
 800047e:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i<1000; i++) {
 8000480:	2300      	movs	r3, #0
 8000482:	63bb      	str	r3, [r7, #56]	; 0x38
 8000484:	e01d      	b.n	80004c2 <main+0xba>
 8000486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000488:	61bb      	str	r3, [r7, #24]
 800048a:	f107 030c 	add.w	r3, r7, #12
 800048e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000490:	edd7 7a06 	vldr	s15, [r7, #24]
 8000494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049c:	db09      	blt.n	80004b2 <main+0xaa>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800049e:	ed97 0a06 	vldr	s0, [r7, #24]
 80004a2:	f001 f9a9 	bl	80017f8 <sqrtf>
 80004a6:	eef0 7a40 	vmov.f32	s15, s0
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80004b0:	e004      	b.n	80004bc <main+0xb4>
    }
    else
    {
      *pOut = 0.0f;
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	f04f 0200 	mov.w	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80004ba:	bf00      	nop
 80004bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004be:	3301      	adds	r3, #1
 80004c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80004c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004c8:	d3dd      	bcc.n	8000486 <main+0x7e>
		arm_sqrt_f32(val_i1, &val_f2);
	}
	ITM_Port32(31) = 2;
 80004ca:	4b29      	ldr	r3, [pc, #164]	; (8000570 <main+0x168>)
 80004cc:	2202      	movs	r2, #2
 80004ce:	601a      	str	r2, [r3, #0]

	ITM_Port32(31) = 1;
 80004d0:	4b27      	ldr	r3, [pc, #156]	; (8000570 <main+0x168>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i<1000; i++) {
 80004d6:	2300      	movs	r3, #0
 80004d8:	637b      	str	r3, [r7, #52]	; 0x34
 80004da:	e009      	b.n	80004f0 <main+0xe8>
		cNewtonSqrt(val_i1, &val_f3);
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	4618      	mov	r0, r3
 80004e2:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80004e6:	f7ff fec5 	bl	8000274 <cNewtonSqrt>
	for (uint32_t i=0; i<1000; i++) {
 80004ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ec:	3301      	adds	r3, #1
 80004ee:	637b      	str	r3, [r7, #52]	; 0x34
 80004f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004f6:	d3f1      	bcc.n	80004dc <main+0xd4>
	}
	ITM_Port32(31) = 2;
 80004f8:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <main+0x168>)
 80004fa:	2202      	movs	r2, #2
 80004fc:	601a      	str	r2, [r3, #0]

	ITM_Port32(31) = 1;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <main+0x168>)
 8000500:	2201      	movs	r2, #1
 8000502:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i<1000; i++) {
 8000504:	2300      	movs	r3, #0
 8000506:	633b      	str	r3, [r7, #48]	; 0x30
 8000508:	e00c      	b.n	8000524 <main+0x11c>
		cNewtonx2cos(val_i2_guess, val_i2_phi, val_i2_omega, &val_f4);
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	4618      	mov	r0, r3
 800050e:	ed97 1a08 	vldr	s2, [r7, #32]
 8000512:	edd7 0a07 	vldr	s1, [r7, #28]
 8000516:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800051a:	f7ff ff01 	bl	8000320 <cNewtonx2cos>
	for (uint32_t i=0; i<1000; i++) {
 800051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000520:	3301      	adds	r3, #1
 8000522:	633b      	str	r3, [r7, #48]	; 0x30
 8000524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800052a:	d3ee      	bcc.n	800050a <main+0x102>
	}
	ITM_Port32(31) = 2;
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <main+0x168>)
 800052e:	2202      	movs	r2, #2
 8000530:	601a      	str	r2, [r3, #0]

	ITM_Port32(31) = 1;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <main+0x168>)
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
	for (uint32_t i=0; i<1000; i++) {
 8000538:	2300      	movs	r3, #0
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800053c:	e00c      	b.n	8000558 <main+0x150>
		asmx2cos(val_i2_guess, val_i2_phi, val_i2_omega, &val_f5);
 800053e:	463b      	mov	r3, r7
 8000540:	4618      	mov	r0, r3
 8000542:	ed97 1a08 	vldr	s2, [r7, #32]
 8000546:	edd7 0a07 	vldr	s1, [r7, #28]
 800054a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800054e:	f7ff fe42 	bl	80001d6 <asmx2cos>
	for (uint32_t i=0; i<1000; i++) {
 8000552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000554:	3301      	adds	r3, #1
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800055a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800055e:	d3ee      	bcc.n	800053e <main+0x136>
	}
	ITM_Port32(31) = 2;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <main+0x168>)
 8000562:	2202      	movs	r2, #2
 8000564:	601a      	str	r2, [r3, #0]
	ITM_Port32(31) = 1;
 8000566:	e771      	b.n	800044c <main+0x44>
 8000568:	46408400 	.word	0x46408400
 800056c:	3cf5c28f 	.word	0x3cf5c28f
 8000570:	e000007c 	.word	0xe000007c

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b096      	sub	sp, #88	; 0x58
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2244      	movs	r2, #68	; 0x44
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f906 	bl	8001794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000596:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059a:	f000 fa4d 	bl	8000a38 <HAL_PWREx_ControlVoltageScaling>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a4:	f000 f850 	bl	8000648 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a8:	2310      	movs	r3, #16
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b4:	2360      	movs	r3, #96	; 0x60
 80005b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005bc:	2301      	movs	r3, #1
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005c4:	2328      	movs	r3, #40	; 0x28
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c8:	2307      	movs	r3, #7
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fa83 	bl	8000ae4 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005e4:	f000 f830 	bl	8000648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2303      	movs	r3, #3
 80005ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	2104      	movs	r1, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fe4b 	bl	800129c <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800060c:	f000 f81c 	bl	8000648 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3758      	adds	r7, #88	; 0x58
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_GPIO_Init+0x2c>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <MX_GPIO_Init+0x2c>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_GPIO_Init+0x2c>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	e7fe      	b.n	8000650 <Error_Handler+0x8>
	...

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <HAL_MspInit+0x44>)
 800065c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <HAL_MspInit+0x44>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6613      	str	r3, [r2, #96]	; 0x60
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <HAL_MspInit+0x44>)
 8000668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_MspInit+0x44>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000676:	4a08      	ldr	r2, [pc, #32]	; (8000698 <HAL_MspInit+0x44>)
 8000678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067c:	6593      	str	r3, [r2, #88]	; 0x58
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_MspInit+0x44>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <NMI_Handler+0x4>

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <MemManage_Handler+0x4>

080006ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <UsageFault_Handler+0x4>

080006ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e8:	f000 f892 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <SystemInit+0x20>)
 80006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006fa:	4a05      	ldr	r2, [pc, #20]	; (8000710 <SystemInit+0x20>)
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800074c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000718:	f7ff ffea 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <LoopForever+0x6>)
  ldr r1, =_edata
 800071e:	490d      	ldr	r1, [pc, #52]	; (8000754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <LoopForever+0xe>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000734:	4c0a      	ldr	r4, [pc, #40]	; (8000760 <LoopForever+0x16>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f001 f835 	bl	80017b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000746:	f7ff fe5f 	bl	8000408 <main>

0800074a <LoopForever>:

LoopForever:
    b LoopForever
 800074a:	e7fe      	b.n	800074a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800074c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000758:	080020a0 	.word	0x080020a0
  ldr r2, =_sbss
 800075c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000760:	200001b4 	.word	0x200001b4

08000764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_2_IRQHandler>

08000766 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800076c:	2300      	movs	r3, #0
 800076e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f91f 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000776:	2000      	movs	r0, #0
 8000778:	f000 f80e 	bl	8000798 <HAL_InitTick>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	e001      	b.n	800078c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000788:	f7ff ff64 	bl	8000654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800078c:	79fb      	ldrb	r3, [r7, #7]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007a0:	2300      	movs	r3, #0
 80007a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <HAL_InitTick+0x6c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d023      	beq.n	80007f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <HAL_InitTick+0x70>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <HAL_InitTick+0x6c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f91d 	bl	8000a02 <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10f      	bne.n	80007ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d809      	bhi.n	80007e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d4:	2200      	movs	r2, #0
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	f000 f8f5 	bl	80009ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e0:	4a0a      	ldr	r2, [pc, #40]	; (800080c <HAL_InitTick+0x74>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6013      	str	r3, [r2, #0]
 80007e6:	e007      	b.n	80007f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007e8:	2301      	movs	r3, #1
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e004      	b.n	80007f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	e001      	b.n	80007f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008
 8000808:	20000000 	.word	0x20000000
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x20>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_IncTick+0x24>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_IncTick+0x24>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000008 	.word	0x20000008
 8000834:	20000078 	.word	0x20000078

08000838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_GetTick+0x14>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000078 	.word	0x20000078

08000850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	60d3      	str	r3, [r2, #12]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <__NVIC_GetPriorityGrouping+0x18>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	f003 0307 	and.w	r3, r3, #7
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db0a      	blt.n	80008de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	490c      	ldr	r1, [pc, #48]	; (8000900 <__NVIC_SetPriority+0x4c>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	0112      	lsls	r2, r2, #4
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	440b      	add	r3, r1
 80008d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008dc:	e00a      	b.n	80008f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4908      	ldr	r1, [pc, #32]	; (8000904 <__NVIC_SetPriority+0x50>)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	3b04      	subs	r3, #4
 80008ec:	0112      	lsls	r2, r2, #4
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	440b      	add	r3, r1
 80008f2:	761a      	strb	r2, [r3, #24]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000908:	b480      	push	{r7}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f1c3 0307 	rsb	r3, r3, #7
 8000922:	2b04      	cmp	r3, #4
 8000924:	bf28      	it	cs
 8000926:	2304      	movcs	r3, #4
 8000928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3304      	adds	r3, #4
 800092e:	2b06      	cmp	r3, #6
 8000930:	d902      	bls.n	8000938 <NVIC_EncodePriority+0x30>
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3b03      	subs	r3, #3
 8000936:	e000      	b.n	800093a <NVIC_EncodePriority+0x32>
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	f04f 32ff 	mov.w	r2, #4294967295
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43da      	mvns	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	401a      	ands	r2, r3
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000950:	f04f 31ff 	mov.w	r1, #4294967295
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	43d9      	mvns	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	4313      	orrs	r3, r2
         );
}
 8000962:	4618      	mov	r0, r3
 8000964:	3724      	adds	r7, #36	; 0x24
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000980:	d301      	bcc.n	8000986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000982:	2301      	movs	r3, #1
 8000984:	e00f      	b.n	80009a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <SysTick_Config+0x40>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098e:	210f      	movs	r1, #15
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f7ff ff8e 	bl	80008b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <SysTick_Config+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <SysTick_Config+0x40>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	e000e010 	.word	0xe000e010

080009b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff47 	bl	8000850 <__NVIC_SetPriorityGrouping>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b086      	sub	sp, #24
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009dc:	f7ff ff5c 	bl	8000898 <__NVIC_GetPriorityGrouping>
 80009e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff ff8e 	bl	8000908 <NVIC_EncodePriority>
 80009ec:	4602      	mov	r2, r0
 80009ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff5d 	bl	80008b4 <__NVIC_SetPriority>
}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffb0 	bl	8000970 <SysTick_Config>
 8000a10:	4603      	mov	r3, r0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <HAL_PWREx_GetVoltageRange+0x18>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40007000 	.word	0x40007000

08000a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a46:	d130      	bne.n	8000aaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a54:	d038      	beq.n	8000ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2232      	movs	r2, #50	; 0x32
 8000a6c:	fb02 f303 	mul.w	r3, r2, r3
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	0c9b      	lsrs	r3, r3, #18
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a7c:	e002      	b.n	8000a84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a90:	d102      	bne.n	8000a98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1f2      	bne.n	8000a7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa4:	d110      	bne.n	8000ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e00f      	b.n	8000aca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ab6:	d007      	beq.n	8000ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ac0:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40007000 	.word	0x40007000
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	431bde83 	.word	0x431bde83

08000ae4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e3ca      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000af6:	4b97      	ldr	r3, [pc, #604]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f003 030c 	and.w	r3, r3, #12
 8000afe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b00:	4b94      	ldr	r3, [pc, #592]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 80e4 	beq.w	8000ce0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d007      	beq.n	8000b2e <HAL_RCC_OscConfig+0x4a>
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	2b0c      	cmp	r3, #12
 8000b22:	f040 808b 	bne.w	8000c3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	f040 8087 	bne.w	8000c3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b2e:	4b89      	ldr	r3, [pc, #548]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d005      	beq.n	8000b46 <HAL_RCC_OscConfig+0x62>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e3a2      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a1a      	ldr	r2, [r3, #32]
 8000b4a:	4b82      	ldr	r3, [pc, #520]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d004      	beq.n	8000b60 <HAL_RCC_OscConfig+0x7c>
 8000b56:	4b7f      	ldr	r3, [pc, #508]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b5e:	e005      	b.n	8000b6c <HAL_RCC_OscConfig+0x88>
 8000b60:	4b7c      	ldr	r3, [pc, #496]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b66:	091b      	lsrs	r3, r3, #4
 8000b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d223      	bcs.n	8000bb8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a1b      	ldr	r3, [r3, #32]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fd1d 	bl	80015b4 <RCC_SetFlashLatencyFromMSIRange>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e383      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b84:	4b73      	ldr	r3, [pc, #460]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a72      	ldr	r2, [pc, #456]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b70      	ldr	r3, [pc, #448]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ba2:	4b6c      	ldr	r3, [pc, #432]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	4968      	ldr	r1, [pc, #416]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	604b      	str	r3, [r1, #4]
 8000bb6:	e025      	b.n	8000c04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bb8:	4b66      	ldr	r3, [pc, #408]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a65      	ldr	r2, [pc, #404]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b63      	ldr	r3, [pc, #396]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a1b      	ldr	r3, [r3, #32]
 8000bd0:	4960      	ldr	r1, [pc, #384]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bd6:	4b5f      	ldr	r3, [pc, #380]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	495b      	ldr	r1, [pc, #364]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000be6:	4313      	orrs	r3, r2
 8000be8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d109      	bne.n	8000c04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fcdd 	bl	80015b4 <RCC_SetFlashLatencyFromMSIRange>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e343      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c04:	f000 fc4a 	bl	800149c <HAL_RCC_GetSysClockFreq>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b52      	ldr	r3, [pc, #328]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	4950      	ldr	r1, [pc, #320]	; (8000d58 <HAL_RCC_OscConfig+0x274>)
 8000c16:	5ccb      	ldrb	r3, [r1, r3]
 8000c18:	f003 031f 	and.w	r3, r3, #31
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	4a4e      	ldr	r2, [pc, #312]	; (8000d5c <HAL_RCC_OscConfig+0x278>)
 8000c22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000c24:	4b4e      	ldr	r3, [pc, #312]	; (8000d60 <HAL_RCC_OscConfig+0x27c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fdb5 	bl	8000798 <HAL_InitTick>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d052      	beq.n	8000cde <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	e327      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d032      	beq.n	8000caa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000c44:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a42      	ldr	r2, [pc, #264]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c50:	f7ff fdf2 	bl	8000838 <HAL_GetTick>
 8000c54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c58:	f7ff fdee 	bl	8000838 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e310      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c6a:	4b3a      	ldr	r3, [pc, #232]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0f0      	beq.n	8000c58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c76:	4b37      	ldr	r3, [pc, #220]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a36      	ldr	r2, [pc, #216]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a1b      	ldr	r3, [r3, #32]
 8000c8e:	4931      	ldr	r1, [pc, #196]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000c90:	4313      	orrs	r3, r2
 8000c92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c94:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	492c      	ldr	r1, [pc, #176]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	604b      	str	r3, [r1, #4]
 8000ca8:	e01a      	b.n	8000ce0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a29      	ldr	r2, [pc, #164]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000cb0:	f023 0301 	bic.w	r3, r3, #1
 8000cb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000cb6:	f7ff fdbf 	bl	8000838 <HAL_GetTick>
 8000cba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000cbc:	e008      	b.n	8000cd0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cbe:	f7ff fdbb 	bl	8000838 <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d901      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e2dd      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1f0      	bne.n	8000cbe <HAL_RCC_OscConfig+0x1da>
 8000cdc:	e000      	b.n	8000ce0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cde:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d074      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	d005      	beq.n	8000cfe <HAL_RCC_OscConfig+0x21a>
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	2b0c      	cmp	r3, #12
 8000cf6:	d10e      	bne.n	8000d16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d10b      	bne.n	8000d16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d064      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x2f0>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d160      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e2ba      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1e:	d106      	bne.n	8000d2e <HAL_RCC_OscConfig+0x24a>
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	e026      	b.n	8000d7c <HAL_RCC_OscConfig+0x298>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d36:	d115      	bne.n	8000d64 <HAL_RCC_OscConfig+0x280>
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000d3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a02      	ldr	r2, [pc, #8]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e014      	b.n	8000d7c <HAL_RCC_OscConfig+0x298>
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	08001854 	.word	0x08001854
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000004 	.word	0x20000004
 8000d64:	4ba0      	ldr	r3, [pc, #640]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a9f      	ldr	r2, [pc, #636]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b9d      	ldr	r3, [pc, #628]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a9c      	ldr	r2, [pc, #624]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d013      	beq.n	8000dac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d84:	f7ff fd58 	bl	8000838 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d8c:	f7ff fd54 	bl	8000838 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b64      	cmp	r3, #100	; 0x64
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e276      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d9e:	4b92      	ldr	r3, [pc, #584]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0x2a8>
 8000daa:	e014      	b.n	8000dd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dac:	f7ff fd44 	bl	8000838 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db4:	f7ff fd40 	bl	8000838 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b64      	cmp	r3, #100	; 0x64
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e262      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dc6:	4b88      	ldr	r3, [pc, #544]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f0      	bne.n	8000db4 <HAL_RCC_OscConfig+0x2d0>
 8000dd2:	e000      	b.n	8000dd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d060      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d005      	beq.n	8000df4 <HAL_RCC_OscConfig+0x310>
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	2b0c      	cmp	r3, #12
 8000dec:	d119      	bne.n	8000e22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d116      	bne.n	8000e22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000df4:	4b7c      	ldr	r3, [pc, #496]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d005      	beq.n	8000e0c <HAL_RCC_OscConfig+0x328>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e23f      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0c:	4b76      	ldr	r3, [pc, #472]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	061b      	lsls	r3, r3, #24
 8000e1a:	4973      	ldr	r1, [pc, #460]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e20:	e040      	b.n	8000ea4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d023      	beq.n	8000e72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e2a:	4b6f      	ldr	r3, [pc, #444]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a6e      	ldr	r2, [pc, #440]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e36:	f7ff fcff 	bl	8000838 <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e3c:	e008      	b.n	8000e50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e3e:	f7ff fcfb 	bl	8000838 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e21d      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e50:	4b65      	ldr	r3, [pc, #404]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f0      	beq.n	8000e3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5c:	4b62      	ldr	r3, [pc, #392]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	061b      	lsls	r3, r3, #24
 8000e6a:	495f      	ldr	r1, [pc, #380]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	604b      	str	r3, [r1, #4]
 8000e70:	e018      	b.n	8000ea4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e72:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a5c      	ldr	r2, [pc, #368]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fcdb 	bl	8000838 <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e86:	f7ff fcd7 	bl	8000838 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e1f9      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e98:	4b53      	ldr	r3, [pc, #332]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1f0      	bne.n	8000e86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d03c      	beq.n	8000f2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d01c      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eb8:	4b4b      	ldr	r3, [pc, #300]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ebe:	4a4a      	ldr	r2, [pc, #296]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ec8:	f7ff fcb6 	bl	8000838 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fcb2 	bl	8000838 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e1d4      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ee2:	4b41      	ldr	r3, [pc, #260]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0ef      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x3ec>
 8000ef0:	e01b      	b.n	8000f2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ef2:	4b3d      	ldr	r3, [pc, #244]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ef8:	4a3b      	ldr	r2, [pc, #236]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000efa:	f023 0301 	bic.w	r3, r3, #1
 8000efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f02:	f7ff fc99 	bl	8000838 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fc95 	bl	8000838 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e1b7      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f1c:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1ef      	bne.n	8000f0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 80a6 	beq.w	8001084 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10d      	bne.n	8000f64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f52:	6593      	str	r3, [r2, #88]	; 0x58
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f60:	2301      	movs	r3, #1
 8000f62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <HAL_RCC_OscConfig+0x508>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d118      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <HAL_RCC_OscConfig+0x508>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_RCC_OscConfig+0x508>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fc5c 	bl	8000838 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f84:	f7ff fc58 	bl	8000838 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e17a      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_RCC_OscConfig+0x508>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f0      	beq.n	8000f84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d108      	bne.n	8000fbc <HAL_RCC_OscConfig+0x4d8>
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000fba:	e029      	b.n	8001010 <HAL_RCC_OscConfig+0x52c>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d115      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x50c>
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fda:	4a03      	ldr	r2, [pc, #12]	; (8000fe8 <HAL_RCC_OscConfig+0x504>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000fe4:	e014      	b.n	8001010 <HAL_RCC_OscConfig+0x52c>
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40007000 	.word	0x40007000
 8000ff0:	4b9c      	ldr	r3, [pc, #624]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8000ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff6:	4a9b      	ldr	r2, [pc, #620]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001000:	4b98      	ldr	r3, [pc, #608]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001006:	4a97      	ldr	r2, [pc, #604]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001008:	f023 0304 	bic.w	r3, r3, #4
 800100c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d016      	beq.n	8001046 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001018:	f7ff fc0e 	bl	8000838 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800101e:	e00a      	b.n	8001036 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001020:	f7ff fc0a 	bl	8000838 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	f241 3288 	movw	r2, #5000	; 0x1388
 800102e:	4293      	cmp	r3, r2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e12a      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001036:	4b8b      	ldr	r3, [pc, #556]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0ed      	beq.n	8001020 <HAL_RCC_OscConfig+0x53c>
 8001044:	e015      	b.n	8001072 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001046:	f7ff fbf7 	bl	8000838 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800104c:	e00a      	b.n	8001064 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104e:	f7ff fbf3 	bl	8000838 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	f241 3288 	movw	r2, #5000	; 0x1388
 800105c:	4293      	cmp	r3, r2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e113      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001064:	4b7f      	ldr	r3, [pc, #508]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1ed      	bne.n	800104e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001072:	7ffb      	ldrb	r3, [r7, #31]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d105      	bne.n	8001084 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001078:	4b7a      	ldr	r3, [pc, #488]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a79      	ldr	r2, [pc, #484]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 800107e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80fe 	beq.w	800128a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	2b02      	cmp	r3, #2
 8001094:	f040 80d0 	bne.w	8001238 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001098:	4b72      	ldr	r3, [pc, #456]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f003 0203 	and.w	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d130      	bne.n	800110e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	3b01      	subs	r3, #1
 80010b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d127      	bne.n	800110e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d11f      	bne.n	800110e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80010d8:	2a07      	cmp	r2, #7
 80010da:	bf14      	ite	ne
 80010dc:	2201      	movne	r2, #1
 80010de:	2200      	moveq	r2, #0
 80010e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d113      	bne.n	800110e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f0:	085b      	lsrs	r3, r3, #1
 80010f2:	3b01      	subs	r3, #1
 80010f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d109      	bne.n	800110e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	085b      	lsrs	r3, r3, #1
 8001106:	3b01      	subs	r3, #1
 8001108:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800110a:	429a      	cmp	r2, r3
 800110c:	d06e      	beq.n	80011ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b0c      	cmp	r3, #12
 8001112:	d069      	beq.n	80011e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d105      	bne.n	800112c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001120:	4b50      	ldr	r3, [pc, #320]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0ad      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001130:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a4b      	ldr	r2, [pc, #300]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800113a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800113c:	f7ff fb7c 	bl	8000838 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001144:	f7ff fb78 	bl	8000838 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e09a      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001156:	4b43      	ldr	r3, [pc, #268]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001162:	4b40      	ldr	r3, [pc, #256]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	4b40      	ldr	r3, [pc, #256]	; (8001268 <HAL_RCC_OscConfig+0x784>)
 8001168:	4013      	ands	r3, r2
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001172:	3a01      	subs	r2, #1
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	4311      	orrs	r1, r2
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800117c:	0212      	lsls	r2, r2, #8
 800117e:	4311      	orrs	r1, r2
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001184:	0852      	lsrs	r2, r2, #1
 8001186:	3a01      	subs	r2, #1
 8001188:	0552      	lsls	r2, r2, #21
 800118a:	4311      	orrs	r1, r2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001190:	0852      	lsrs	r2, r2, #1
 8001192:	3a01      	subs	r2, #1
 8001194:	0652      	lsls	r2, r2, #25
 8001196:	4311      	orrs	r1, r2
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800119c:	0912      	lsrs	r2, r2, #4
 800119e:	0452      	lsls	r2, r2, #17
 80011a0:	430a      	orrs	r2, r1
 80011a2:	4930      	ldr	r1, [pc, #192]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 80011ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	4a2a      	ldr	r2, [pc, #168]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 80011ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80011c0:	f7ff fb3a 	bl	8000838 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c8:	f7ff fb36 	bl	8000838 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e058      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011e6:	e050      	b.n	800128a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e04f      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d148      	bne.n	800128a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 80011fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001202:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4a16      	ldr	r2, [pc, #88]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 800120a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800120e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001210:	f7ff fb12 	bl	8000838 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001218:	f7ff fb0e 	bl	8000838 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e030      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0x734>
 8001236:	e028      	b.n	800128a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b0c      	cmp	r3, #12
 800123c:	d023      	beq.n	8001286 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_RCC_OscConfig+0x780>)
 8001244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124a:	f7ff faf5 	bl	8000838 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001250:	e00c      	b.n	800126c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001252:	f7ff faf1 	bl	8000838 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d905      	bls.n	800126c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e013      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
 8001264:	40021000 	.word	0x40021000
 8001268:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_RCC_OscConfig+0x7b0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ec      	bne.n	8001252 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_RCC_OscConfig+0x7b0>)
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	4905      	ldr	r1, [pc, #20]	; (8001294 <HAL_RCC_OscConfig+0x7b0>)
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_RCC_OscConfig+0x7b4>)
 8001280:	4013      	ands	r3, r2
 8001282:	60cb      	str	r3, [r1, #12]
 8001284:	e001      	b.n	800128a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	feeefffc 	.word	0xfeeefffc

0800129c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0e7      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012b0:	4b75      	ldr	r3, [pc, #468]	; (8001488 <HAL_RCC_ClockConfig+0x1ec>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d910      	bls.n	80012e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012be:	4b72      	ldr	r3, [pc, #456]	; (8001488 <HAL_RCC_ClockConfig+0x1ec>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 0207 	bic.w	r2, r3, #7
 80012c6:	4970      	ldr	r1, [pc, #448]	; (8001488 <HAL_RCC_ClockConfig+0x1ec>)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ce:	4b6e      	ldr	r3, [pc, #440]	; (8001488 <HAL_RCC_ClockConfig+0x1ec>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d001      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e0cf      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d010      	beq.n	800130e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d908      	bls.n	800130e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012fc:	4b63      	ldr	r3, [pc, #396]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4960      	ldr	r1, [pc, #384]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d04c      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001322:	4b5a      	ldr	r3, [pc, #360]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d121      	bne.n	8001372 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e0a6      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d107      	bne.n	800134a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133a:	4b54      	ldr	r3, [pc, #336]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d115      	bne.n	8001372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e09a      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d107      	bne.n	8001362 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001352:	4b4e      	ldr	r3, [pc, #312]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e08e      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001362:	4b4a      	ldr	r3, [pc, #296]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e086      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001372:	4b46      	ldr	r3, [pc, #280]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f023 0203 	bic.w	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4943      	ldr	r1, [pc, #268]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 8001380:	4313      	orrs	r3, r2
 8001382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001384:	f7ff fa58 	bl	8000838 <HAL_GetTick>
 8001388:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	e00a      	b.n	80013a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800138c:	f7ff fa54 	bl	8000838 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f241 3288 	movw	r2, #5000	; 0x1388
 800139a:	4293      	cmp	r3, r2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e06e      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a2:	4b3a      	ldr	r3, [pc, #232]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 020c 	and.w	r2, r3, #12
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d1eb      	bne.n	800138c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d010      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	4b31      	ldr	r3, [pc, #196]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d208      	bcs.n	80013e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d0:	4b2e      	ldr	r3, [pc, #184]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	492b      	ldr	r1, [pc, #172]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <HAL_RCC_ClockConfig+0x1ec>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d210      	bcs.n	8001412 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <HAL_RCC_ClockConfig+0x1ec>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 0207 	bic.w	r2, r3, #7
 80013f8:	4923      	ldr	r1, [pc, #140]	; (8001488 <HAL_RCC_ClockConfig+0x1ec>)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_RCC_ClockConfig+0x1ec>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d001      	beq.n	8001412 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e036      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	4918      	ldr	r1, [pc, #96]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 800142c:	4313      	orrs	r3, r2
 800142e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d009      	beq.n	8001450 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4910      	ldr	r1, [pc, #64]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 800144c:	4313      	orrs	r3, r2
 800144e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001450:	f000 f824 	bl	800149c <HAL_RCC_GetSysClockFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_RCC_ClockConfig+0x1f0>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	490b      	ldr	r1, [pc, #44]	; (8001490 <HAL_RCC_ClockConfig+0x1f4>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
 800146c:	4a09      	ldr	r2, [pc, #36]	; (8001494 <HAL_RCC_ClockConfig+0x1f8>)
 800146e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_ClockConfig+0x1fc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f98f 	bl	8000798 <HAL_InitTick>
 800147a:	4603      	mov	r3, r0
 800147c:	72fb      	strb	r3, [r7, #11]

  return status;
 800147e:	7afb      	ldrb	r3, [r7, #11]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40022000 	.word	0x40022000
 800148c:	40021000 	.word	0x40021000
 8001490:	08001854 	.word	0x08001854
 8001494:	20000000 	.word	0x20000000
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014aa:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b4:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_GetSysClockFreq+0x34>
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b0c      	cmp	r3, #12
 80014c8:	d121      	bne.n	800150e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d11e      	bne.n	800150e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d107      	bne.n	80014ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80014de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e005      	b.n	80014f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80014f8:	4a2b      	ldr	r2, [pc, #172]	; (80015a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10d      	bne.n	8001524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2b04      	cmp	r3, #4
 8001512:	d102      	bne.n	800151a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <HAL_RCC_GetSysClockFreq+0x110>)
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	e004      	b.n	8001524 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	2b08      	cmp	r3, #8
 800151e:	d101      	bne.n	8001524 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001522:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	2b0c      	cmp	r3, #12
 8001528:	d134      	bne.n	8001594 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d003      	beq.n	8001542 <HAL_RCC_GetSysClockFreq+0xa6>
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d003      	beq.n	8001548 <HAL_RCC_GetSysClockFreq+0xac>
 8001540:	e005      	b.n	800154e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_RCC_GetSysClockFreq+0x110>)
 8001544:	617b      	str	r3, [r7, #20]
      break;
 8001546:	e005      	b.n	8001554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800154a:	617b      	str	r3, [r7, #20]
      break;
 800154c:	e002      	b.n	8001554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	617b      	str	r3, [r7, #20]
      break;
 8001552:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	3301      	adds	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	fb03 f202 	mul.w	r2, r3, r2
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	fbb2 f3f3 	udiv	r3, r2, r3
 8001578:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	0e5b      	lsrs	r3, r3, #25
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	3301      	adds	r3, #1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001594:	69bb      	ldr	r3, [r7, #24]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	08001864 	.word	0x08001864
 80015ac:	00f42400 	.word	0x00f42400
 80015b0:	007a1200 	.word	0x007a1200

080015b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80015cc:	f7ff fa26 	bl	8000a1c <HAL_PWREx_GetVoltageRange>
 80015d0:	6178      	str	r0, [r7, #20]
 80015d2:	e014      	b.n	80015fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	4a24      	ldr	r2, [pc, #144]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015de:	6593      	str	r3, [r2, #88]	; 0x58
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80015ec:	f7ff fa16 	bl	8000a1c <HAL_PWREx_GetVoltageRange>
 80015f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001604:	d10b      	bne.n	800161e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b80      	cmp	r3, #128	; 0x80
 800160a:	d919      	bls.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2ba0      	cmp	r3, #160	; 0xa0
 8001610:	d902      	bls.n	8001618 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001612:	2302      	movs	r3, #2
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	e013      	b.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001618:	2301      	movs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	e010      	b.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b80      	cmp	r3, #128	; 0x80
 8001622:	d902      	bls.n	800162a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001624:	2303      	movs	r3, #3
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	e00a      	b.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b80      	cmp	r3, #128	; 0x80
 800162e:	d102      	bne.n	8001636 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	e004      	b.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b70      	cmp	r3, #112	; 0x70
 800163a:	d101      	bne.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 0207 	bic.w	r2, r3, #7
 8001648:	4909      	ldr	r1, [pc, #36]	; (8001670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	429a      	cmp	r2, r3
 800165c:	d001      	beq.n	8001662 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	40022000 	.word	0x40022000

08001674 <arm_sin_f32>:
 8001674:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80016f4 <arm_sin_f32+0x80>
 8001678:	ee20 0a27 	vmul.f32	s0, s0, s15
 800167c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8001688:	d504      	bpl.n	8001694 <arm_sin_f32+0x20>
 800168a:	ee17 3a90 	vmov	r3, s15
 800168e:	3b01      	subs	r3, #1
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001698:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80016f8 <arm_sin_f32+0x84>
 800169c:	ee30 0a67 	vsub.f32	s0, s0, s15
 80016a0:	ee20 0a07 	vmul.f32	s0, s0, s14
 80016a4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80016a8:	ee17 3a90 	vmov	r3, s15
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016b2:	d21a      	bcs.n	80016ea <arm_sin_f32+0x76>
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016bc:	1c59      	adds	r1, r3, #1
 80016be:	ee30 0a67 	vsub.f32	s0, s0, s15
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <arm_sin_f32+0x88>)
 80016c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80016c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80016cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80016d0:	ed93 7a00 	vldr	s14, [r3]
 80016d4:	edd2 6a00 	vldr	s13, [r2]
 80016d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80016dc:	ee20 0a26 	vmul.f32	s0, s0, s13
 80016e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80016e8:	4770      	bx	lr
 80016ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 80016ee:	2101      	movs	r1, #1
 80016f0:	2300      	movs	r3, #0
 80016f2:	e7e6      	b.n	80016c2 <arm_sin_f32+0x4e>
 80016f4:	3e22f983 	.word	0x3e22f983
 80016f8:	44000000 	.word	0x44000000
 80016fc:	08001894 	.word	0x08001894

08001700 <arm_cos_f32>:
 8001700:	eddf 7a21 	vldr	s15, [pc, #132]	; 8001788 <arm_cos_f32+0x88>
 8001704:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001708:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800170c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001710:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800171c:	d504      	bpl.n	8001728 <arm_cos_f32+0x28>
 800171e:	ee17 3a90 	vmov	r3, s15
 8001722:	3b01      	subs	r3, #1
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800178c <arm_cos_f32+0x8c>
 8001730:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001734:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001738:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800173c:	ee17 3a90 	vmov	r3, s15
 8001740:	b29b      	uxth	r3, r3
 8001742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001746:	d21a      	bcs.n	800177e <arm_cos_f32+0x7e>
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001750:	1c59      	adds	r1, r3, #1
 8001752:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <arm_cos_f32+0x90>)
 8001758:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800175c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001760:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001764:	ed93 7a00 	vldr	s14, [r3]
 8001768:	edd2 6a00 	vldr	s13, [r2]
 800176c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001770:	ee20 0a26 	vmul.f32	s0, s0, s13
 8001774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001778:	ee37 0a80 	vadd.f32	s0, s15, s0
 800177c:	4770      	bx	lr
 800177e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001782:	2101      	movs	r1, #1
 8001784:	2300      	movs	r3, #0
 8001786:	e7e6      	b.n	8001756 <arm_cos_f32+0x56>
 8001788:	3e22f983 	.word	0x3e22f983
 800178c:	44000000 	.word	0x44000000
 8001790:	08001894 	.word	0x08001894

08001794 <memset>:
 8001794:	4402      	add	r2, r0
 8001796:	4603      	mov	r3, r0
 8001798:	4293      	cmp	r3, r2
 800179a:	d100      	bne.n	800179e <memset+0xa>
 800179c:	4770      	bx	lr
 800179e:	f803 1b01 	strb.w	r1, [r3], #1
 80017a2:	e7f9      	b.n	8001798 <memset+0x4>

080017a4 <__errno>:
 80017a4:	4b01      	ldr	r3, [pc, #4]	; (80017ac <__errno+0x8>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000058 	.word	0x20000058

080017b0 <__libc_init_array>:
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	4d0d      	ldr	r5, [pc, #52]	; (80017e8 <__libc_init_array+0x38>)
 80017b4:	4c0d      	ldr	r4, [pc, #52]	; (80017ec <__libc_init_array+0x3c>)
 80017b6:	1b64      	subs	r4, r4, r5
 80017b8:	10a4      	asrs	r4, r4, #2
 80017ba:	2600      	movs	r6, #0
 80017bc:	42a6      	cmp	r6, r4
 80017be:	d109      	bne.n	80017d4 <__libc_init_array+0x24>
 80017c0:	4d0b      	ldr	r5, [pc, #44]	; (80017f0 <__libc_init_array+0x40>)
 80017c2:	4c0c      	ldr	r4, [pc, #48]	; (80017f4 <__libc_init_array+0x44>)
 80017c4:	f000 f83a 	bl	800183c <_init>
 80017c8:	1b64      	subs	r4, r4, r5
 80017ca:	10a4      	asrs	r4, r4, #2
 80017cc:	2600      	movs	r6, #0
 80017ce:	42a6      	cmp	r6, r4
 80017d0:	d105      	bne.n	80017de <__libc_init_array+0x2e>
 80017d2:	bd70      	pop	{r4, r5, r6, pc}
 80017d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80017d8:	4798      	blx	r3
 80017da:	3601      	adds	r6, #1
 80017dc:	e7ee      	b.n	80017bc <__libc_init_array+0xc>
 80017de:	f855 3b04 	ldr.w	r3, [r5], #4
 80017e2:	4798      	blx	r3
 80017e4:	3601      	adds	r6, #1
 80017e6:	e7f2      	b.n	80017ce <__libc_init_array+0x1e>
 80017e8:	08002098 	.word	0x08002098
 80017ec:	08002098 	.word	0x08002098
 80017f0:	08002098 	.word	0x08002098
 80017f4:	0800209c 	.word	0x0800209c

080017f8 <sqrtf>:
 80017f8:	b508      	push	{r3, lr}
 80017fa:	ed2d 8b02 	vpush	{d8}
 80017fe:	eeb0 8a40 	vmov.f32	s16, s0
 8001802:	f000 f817 	bl	8001834 <__ieee754_sqrtf>
 8001806:	eeb4 8a48 	vcmp.f32	s16, s16
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d60c      	bvs.n	800182a <sqrtf+0x32>
 8001810:	eddf 8a07 	vldr	s17, [pc, #28]	; 8001830 <sqrtf+0x38>
 8001814:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d505      	bpl.n	800182a <sqrtf+0x32>
 800181e:	f7ff ffc1 	bl	80017a4 <__errno>
 8001822:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8001826:	2321      	movs	r3, #33	; 0x21
 8001828:	6003      	str	r3, [r0, #0]
 800182a:	ecbd 8b02 	vpop	{d8}
 800182e:	bd08      	pop	{r3, pc}
 8001830:	00000000 	.word	0x00000000

08001834 <__ieee754_sqrtf>:
 8001834:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8001838:	4770      	bx	lr
	...

0800183c <_init>:
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	bf00      	nop
 8001840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001842:	bc08      	pop	{r3}
 8001844:	469e      	mov	lr, r3
 8001846:	4770      	bx	lr

08001848 <_fini>:
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	bf00      	nop
 800184c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800184e:	bc08      	pop	{r3}
 8001850:	469e      	mov	lr, r3
 8001852:	4770      	bx	lr
